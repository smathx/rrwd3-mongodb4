
Module #3 Summative: Custom Type Tests
  rq01
    Point class created
    Point Model has an class method called demongoize
    demongoize method takes a hash parameter
    point instance has accessors for latitude and longitude
    demongoize method returns a Point with specified latitude and longitude in hash
    demongoize method handles nil arguments gracefully
    Point Model has an instance method called mongoize
    mongoize method takes no parameters
    mongoize method returns a hash with specified types and values
    Point Model has an class method called mongoize
    mongoize class method takes an object parameter that can be hash, Point or parameter hash
    mongoize class method returns a Point with specified latitude and longitude in hash
    mongoize class method handles nil arguments gracefully
    Point Model has an class method called evolve
    evolve method takes an object parameter that can be hash, Point or parameter hash
    evolve method returns a Point with specified latitude and longitude in hash
    evolve method handles nil arguments gracefully
  rq02
    Address class created
    Address Model has an class method called demongoize
    demongoize method takes a hash parameter
    address instance has accessors for city, state and location
    demongoize method returns an address with specified parameters from hash
    demongoize method handles nil arguments gracefully
    Address Model has an instance method called mongoize
    mongoize method takes no parameters
    mongoize method returns a hash with specified types and values
    Address Model has an class method called mongoize
    mongoize class method takes an object parameter that can be hash, Address or parameter hash
    mongoize class method returns an Address with specified parameters in hash
    mongoize class method handles nil arguments gracefully
    Address Model has an class method called evolve
    evolve method takes an object parameter that can be hash, Address or parameter hash
    evolve method returns a Address with specified parameters in hash
    evolve method handles nil arguments gracefully
  rq03
    Placing class created
    Placing Model has an class method called demongoize
    demongoize method takes a hash parameter
    placing instance has accessors for name and place
    demongoize method returns an address with specified parameters from hash
    demongoize method handles nil arguments gracefully
    Placing Model has an instance method called mongoize
    mongoize method takes no parameters
    mongoize method returns a hash with specified types and values
    Placing Model has an class method called mongoize
    mongoize class method takes an object parameter that can be hash, Placing or parameter hash
    mongoize class method returns a Placing with specified parameters in hash
    mongoize class method handles nil arguments gracefully
    Placing Model has an class method called evolve
    evolve method takes an object parameter that can be hash, Placing or parameter hash
    evolve method returns a Placing with specified parameters in hash
    evolve method handles nil arguments gracefully

Module #3 Summative: Implement Attribute Delegation
  rq01
    Racer class has delegation to simplify calls to RacerInfo
    Racer delegation to custom types like Address is accounted for in model
  rq02
    Race class has been flattened to access and set Event information
    Race has a class method called default that takes no parameters and returns a Race with properties
    Race class has been flattened to access and set location information
  rq03
    Entrant class has flattened configuration relative to Race and Racer
    gender is accessed via racer prefix and name, date are accessed via race prefix
    Embedded race and racer instances will be in place for access and update
    Overall, gender and group placings are flattened through methods
  rq04
    Using flat methods can create an entrant and assign event details from a Race
    Entant has methods to flatten access to result secs and update total secs
    Entrant has methods to facilitate access to specific event properties

Module #3 Summative: Implement Race / Results Cross-Collection
  rq01
    RaceRef class created
    RaceRef class has fields for name, and date
    RaceRef class creates documents with all specified fields
  rq02
    Entrant has a 1:1 embedded relationship with RaceRef
    Entrant document has associated RaceRef embedded within
  rq03
    There is an M:1 relationship from Entrant to Race through RaceRef
    Invoking race methods from Entrant will either reference local RaceRef or from a race document
    Queries from parent (race) collection can be made for entrants ordered by secs then bib ascending
    When a race is deleted, so are all the associated entrants

Module #3 Summative: Implement Racers / Results Cross-Collection
  rq01
    Entrant has a bidrectional 1:1 embedded polymorphic relationship with RacerInfo
    Entrant document has associated RaceRef embedded within
    Entrant is invalid if RacerInfo is invalid
  rq02
    Racer has a 1:M linked relationship with Entrant with foreign key in Entrant.RacerInfo
    Entrants can be retrieved from Racers via the Races they compete in
    When Racer is deleted, RacerInfo foreign key to Entrants are deleted

Module #3 Summative: Implement Racers Collection
  rq01
    RacerInfo class created
    RacerInfo class has fields for first_name, last_name, gender, birth_year, and residence
    Racer class has field mappings fn, ln, g, yr, and res
    Racer class values are accessible through fields and mappings
  rq02
    Racer class created
    Racer class has an id field
  rq03
    Racer and RacerInfo have a 1:1 embdedded relationship
    Creating Racer also creates embedded RacerInfo with id assigned from Racer
    Building compound document Racer results in embedded document with RacerInfo id assigned
  rq04
    RacerInfo implements validations on fields
    RacerInfo validations are correctly validating or generating errors

Module #3 Summative: Implement Races Collection
  rq01
    Race class created
    Race class has fields for name, date, location, and timestamps
    Race class creates documents with all specified fields
  rq02
    Event class created
    Event class has fields for order, name, distance, and units
    Event class values are accessible through fields and mappings
    Event has an instance method called meters that takes no parameters
    meters method converts miles, kilometers, meters and yards to meters or returns nil
    Event has an instance method called miles that takes no parameters
    miles method converts miles, kilometers, meters and yards to meters or returns nil
  rq03
    Event has an M:1 embedded relationship with Race
    Events are embedded within Race document and sorted by order
  rq04
    Event validates the presence of order and name
    Event validations are correctly validating or generating errors
  rq05
    Race contains scopes for contraining results to future or past
    Race scopes constrain results to those from past or from today on

Module #3 Summative: Rails Check
  rq00
    must have top level structure of a rails application

Module #3 Summative: Implement Results Collection
  rq01
    Entrant class created
    Entrant is stored in results collection
    Entrant class has fields for name, date, location, and timestamps
    Entrant class creates documents with all specified fields
  rq02
    LegResult class created
    LegResult class has a secs field
    LegResult has an empty calc_ave callback method to be used by subclasses
    LegResult overrides secs= intance method
    LegResult returns a document with an id and secs
  rq03
    LegResult has an M:1 embedded relationship with Entrant
    LegResults that are created with Entrant are embedded within it
  rq04
    LegResult has a polymorphic 1:1 embedded relationship with Event
    Entrant cannot be saved without presence of an event
    With events, Entrant embeds results and associated events
  rq05
    SwimResult class created
    SwimResult class has a pace_100 field
    SwimResult has instance method calc_ave that takes no parameters and returns a float
    BikeResult class created
    BikeResult class has a mph field
    BikeResult has instance method calc_ave that takes no parameters and returns a float
    RunResult class created
    RunResult class has a minute_mile field
    RunResult has instance method calc_ave that takes no parameters and returns a float
  rq06
    SwimResult calc_ave method calculates the secs to travel 100 m based on event
    BikeResult calc_ave method calculates the average mph based on event
    RunResult calc_ave method calculates average time to run a mile based on event
    secs= method updates field values of the result classes
  rq07
    Entrant has update_total instance method for callback that takes one parameter
    update_total callback updates the Entrants secs field and updated_at with event additions and deletions

Module #3 Summative: Cross-Collection Service Requests
  rq01
    Race class has Integer field next_bib that defaults to 0
    Point Model has an instance method called next_bib that increments value
  rq02
    Race class has a get_group instance method
    get_group method creates Placing object whose name is group by age of racer
  rq03
    Race class has a create_entrant instance method
    if new Entrant not valid, no persist or change will occur and error will be returned
    If valid create_entrant assigns values from Race and Racer and updates bib
  rq04
    Entrant has upcoming scope that returns all future item in query
    Entrant has past scope that returns all past items in query
  rq05
    Race implements a class method upcoming_available_to
    upcoming_available_to gets all future races that given racer has not entered

Module #3 Web Racer/Race Registration
  rq01
    racers#create_entry route exists and is correct
  rq02
    racer#create_entry route will create a registration in the db
  rq03
    There is a Register link on the racers#edit view page

Module #3 Web Race/Racer Resource Access
  rq01
    Racer must have expected controller and routes
    Query to Racer URLs returns the selected image
  rq02
    Race must have expected controller and routes
    Query to Race URLs returns the selected image
  rq03
    Race show page must have table of all entrants information
    Race show page has links to all racers in entrants data
  rq04
    Racer show page must have table of all races racer has registered for
    Race show page has links to all racers in entrants data
  rq05
    Racers edit page has view of upcoming races not yet registered for

Finished in 5.19 seconds (files took 5.12 seconds to load)
158 examples, 0 failures

